// Examples

// 0 = 1 -> False
// eq(#zero, #succ(#zero))
// 1 = 1 -> True
// eq(#succ(#zero), #succ(#zero))

// {0, 2, 3}
// #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty)))
// contain(2, {2, 1}) -> True
// contain(#succ(#succ(#zero)), #cons(#zero, #cons(#succ(#succ(#zero)), #empty)))
// remove(2, {0, 2, 3}) -> {0, 3}
// remove(#succ(#succ(#zero)), #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))))
// {} == {} -> True
// eq_set(#empty, #empty)
// {2, 0}
// #cons(#succ(#succ(#zero)), #cons(#zero , #empty))
// {0, 2, 3} == {0, 2, 3} -> True
// eq_set(#cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))), #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))))
// {0, 2} == {0, 2, 3} -> False
// eq_set(#cons(#zero, #cons(#succ(#succ(#zero)), #empty)), #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))))
// {0, 2} == {2, 0} -> True
// eq_set(#cons(#zero, #cons(#succ(#succ(#zero)), #empty)), #cons(#succ(#succ(#zero)), #cons(#zero , #empty)))
// insert(1, {0,2}) -> {1,0,2}
// insert(#succ(#zero), #cons(#zero, #cons(#succ(#succ(#zero)), #empty)))
// union({}, {}) = {1}
// union(#empty, #empty), #empty)
// union({0},{1}) = {0,1}
// union(#cons(#zero, #empty), #cons(#succ(#zero), #empty))
// union({0,1}, {1,2}) = {0,1,2}
// union(#cons(#zero, #cons(#succ(#zero), #empty)), #cons(#succ(#zero), #cons(#succ(#succ(#zero)), #empty)))
// intersection({0,1}, {1,2}) = {1}
// intersection(#cons(#zero, #cons(#succ(#zero), #empty)), #cons(#succ(#zero), #cons(#succ(#succ(#zero)), #empty)))
// intersection({0,1}, {})
// intersection(#cons(#zero, #cons(#succ(#zero), #empty)), #empty)
// difference({0,1}, {1,2}) = {0}
// difference(#cons(#zero, #cons(#succ(#zero), #empty)), #cons(#succ(#zero), #cons(#succ(#succ(#zero)), #empty)))
// subSet({0}, {0,1}) = True
// subSet(#cons(#zero, #empty), #cons(#zero, #cons(#succ(#zero), #empty)))
// subSet({2}, {0,1}) = False
// subSet(#cons(#succ(#succ(#zero)), #empty), #cons(#zero, #cons(#succ(#zero), #empty)))

type Nat :: #zero or #succ(Nat)
type Boolean :: #True or #False
type Set :: #empty or #cons(_ element: Nat, _ rest: Set)

//BOOLEAN FUNCTIONS

func not(_ bool: Boolean) -> Boolean ::
// Not of a boolean
  match(bool)
    with #True ::
      #False
    with #False ::
      #True

func and(_ bool1: Boolean, _ bool2: Boolean) -> Boolean ::
// And between two booleans (bool1 and bool2)
  match(bool1, bool2)
    with (#True, #True) :: #True
    with (let x, let y) :: #False

func or(_ bool1: Boolean, _ bool2: Boolean) -> Boolean ::
// Or between two booleans (bool1 or bool2)
  match(bool1, bool2)
    with (#False, #False) :: #False
    with (let x, let y) :: #True

// NAT FUNCTIONS

func eq(_ nat1: Nat, _ nat2: Nat) -> Boolean ::
// Equality between two numbers
  match (nat1, nat2)
    with (#zero, #zero) ::
      #True
    with (#succ(let x), #zero) ::
      #False
    with (#zero, #succ(let x)) ::
      #False
    with (#succ(let x), #succ(let y)) ::
      eq(x, y)


// SET FUNCTIONS

func count(_ set: Set) -> Nat ::
// Count number of element in a set
    match set
      with #empty ::
        #zero
      with #cons(let x, let rest) ::
        #succ(count(rest))


func contain(_ nat: Nat, _ set: Set ) -> Boolean ::
// Return if element is in a set
  match set
    with #empty ::
      #False
    with #cons(let x, let rest) ::
      match eq(nat, x)
        with #True :: #True
        with #False ::
          contain(nat, rest)


func remove(_ nat: Nat, _ set: Set) -> Set ::
// Remove an element in a set
  match set
    with #empty ::
      #empty
    with #cons(let x, let rest) ::
      match eq(nat, x)
        with #True :: rest
        with #False :: #cons(x, remove(nat, rest))


func eq_set(_ set1: Set, _ set2: Set) -> Boolean ::
// Equality between two sets
  match (set1, set2)
    with (#empty, #empty) :: #True
    with (#empty, #cons(let x, let r)) :: #False
    with (#cons(let x, let r), #empty) :: #False
    with (#cons(let x, let s1), let s2) ::
      match contain(x, s2)
        with #True ::
          eq_set(s1, remove(x, s2))
        with #False ::
          #False


func insert(_ nat: Nat, _ set: Set) -> Set ::
// Insert an element in a set
  match set
    with #empty ::
      #cons(nat, #empty)
    with let s ::
      match contain(nat, s)
        with #True :: s
        with #False ::
          #cons(nat, s)


func union(_ set1: Set, _ set2: Set) -> Set ::
// Union between two sets
  match (set1, set2)
    with (let s1, #empty) :: s1
    with (let s1, #cons(let x, let s2)) ::
      union(insert(x, s1), s2)


func intersection(_ set1: Set, _ set2: Set) -> Set ::
// Intersection between two sets
  match (set1, set2)
    with (#empty, let s2) :: #empty
    with (#cons(let x, let s1), let s2) ::
      match contain(x, s2)
        with #True :: #cons(x, intersection(s1, s2))
        with #False :: intersection(s1,s2)


func difference(_ set1: Set, _ set2: Set) -> Set ::
// Difference between two sets
  match (set1, set2)
    with (#empty, let s2) :: #empty
    with (#cons(let x, let s1), let s2) ::
      match contain(x, s2)
        with #False :: #cons(x, difference(s1, s2))
        with #True :: difference(s1,s2)


func subSet(_ subset: Set, _ set: Set) -> Boolean ::
// Return if subset is a subset of set
  match (subset, set)
    with (#empty, let s) :: #True
    with (#cons(let x, let ss), let s) ::
      match contain(x, s)
        with #True :: #True and subSet(ss, s)
        with #False :: #False
