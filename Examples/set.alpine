// Examples

// {0, 2, 3}
// #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty)))
// contain(2, {2, 1}) -> True
// contain(#succ(#succ(#zero)), #cons(#zero, #cons(#succ(#succ(#zero)), #empty)))
// remove(2, {0, 2, 3}) -> {0, 3}
// remove(#succ(#succ(#zero)), #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))))
// {} == {} -> True
// eq_set(#empty, #empty)
// {2, 0}
// #cons(#succ(#succ(#zero)), #cons(#zero , #empty))
// {0, 2, 3} == {0, 2, 3} -> True
// eq_set(#cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))), #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))))
// {0, 2} == {0, 2, 3} -> False
// eq_set(#cons(#zero, #cons(#succ(#succ(#zero)), #empty)), #cons(#zero, #cons(#succ(#succ(#zero)), #cons(#succ(#succ(#succ(#zero))), #empty))))
// {0, 2} == {2, 0} -> True
// eq_set(#cons(#zero, #cons(#succ(#succ(#zero)), #empty)), #cons(#succ(#succ(#zero)), #cons(#zero , #empty)))


type Nat :: #zero or #succ(Nat)
type Boolean :: #True or #False
type Set :: #empty or #cons(_ element: Nat, _ rest: Set)

//BOOLEAN FUNCTIONS

func not(_ bool: Boolean) -> Boolean ::
  match(bool)
    with #True ::
      #False
    with #False ::
      #True

// NAT FUNCTIONS

func eq(_ nat1: Nat, _ nat2: Nat) -> Boolean ::
  match (nat1, nat2)
    with (#zero, #zero) ::
      #True
    with (let x, #zero) ::
      #False
    with (#zero, let x) ::
      #False
    with (#succ(let x), #succ(let y)) ::
      eq(x, y)


// SET FUNCTIONS

func count(_ set: Set) -> Nat ::
    match set
      with #empty ::
        #zero
      with #cons(let x, let rest) ::
        #succ(count(rest))


func contain(_ nat: Nat, _ set: Set ) -> Boolean ::
  match set
    with #empty ::
      #False
    with #cons(let x, let rest) ::
      match eq(nat, x)
        with #True :: #True
        with #False ::
          contain(nat, rest);

func remove(_ nat: Nat, _ set: Set) -> Set ::
  match set
    with #empty ::
      #empty
    with #cons(let x, let rest) ::
      match eq(nat, x)
        with #True :: rest
        with #False :: #cons(x, remove(nat, rest));

func eq_set(_ set1: Set, _ set2: Set) -> Boolean ::
  match (set1, set2)
    with (#empty, #empty) :: #True
    with (#empty, let x) :: #False
    with (let x, #empty) :: #False
    with (#cons(let x, let s1), let s2) ::
      match contain(x, s2)
        with #True ::
          eq_set(s1, remove(x, s2))
        with #False ::
          #False
